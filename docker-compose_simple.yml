volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  open-webui:
  flowise:
  langfuse_data:
  valkey-data:

networks:
  ai_stack:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ["ai_stack"]
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - WEBHOOK_URL=https://lobster-simple-kit.ngrok-free.app/
  # links:
  #   - postgres

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ["ai_stack"]
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ["ai_stack"]
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - >
      sleep 3;
      OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text;
      OLLAMA_HOST=ollama:11434 ollama pull deepseek-r1:7b;
      OLLAMA_HOST=ollama:11434 ollama pull llama3.1:8b;
      OLLAMA_HOST=ollama:11434 ollama pull qwen3:8b;
      OLLAMA_HOST=ollama:11434 ollama pull snowflake-arctic-embed2:568m;
    # snowflake-arctic-embed2 has 1024 dimensions, nomic 768 dimensions

    # For a larger context length verison of the model, run these commands:
    # echo "FROM qwen3:14b\n\nPARAMETER num_ctx 32768" > Modelfile
    # ollama create qwen3:14b-32k -f ./Modelfile
    # Change the name of the LLM and num_ctx as you see fit.

services:
  flowise:
    image: flowiseai/flowise
    networks: ["ai_stack"]
    restart: unless-stopped
    container_name: flowise
    environment:
      - PORT=3001
    ports:
      - 3001:3001
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ~/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    networks: ["ai_stack"]
    restart: unless-stopped
    container_name: open-webui
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data

  postgres:
    image: postgres:16-alpine
    networks: ["ai_stack"]
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks: ["ai_stack"]
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  # This is the simplest possible Langfuse setup
  # Simple database for Langfuse
  # langfuse-db:
  #   image: postgres:15
  #   container_name: langfuse-db
  #   environment:
  #     - POSTGRES_USER=langfuse
  #     - POSTGRES_PASSWORD=langfuse123
  #     - POSTGRES_DB=langfuse
  #   volumes:
  #     - langfuse_data:/var/lib/postgresql/data
  #   ports:
  #     - "5433:5432"

  # # Langfuse web interface
  # langfuse:
  #   image: langfuse/langfuse:2
  #   container_name: langfuse
  #   depends_on:
  #     - langfuse-db
  #   ports:
  #     - "3002:3000"
  #   environment:
  #     - DATABASE_URL=postgresql://langfuse:langfuse123@langfuse-db:5432/langfuse
  #     - NEXTAUTH_URL=http://localhost:3002
  #     - NEXTAUTH_SECRET=my-secret-key-change-this
  #     - SALT=my-salt-change-this-too
  #     - REDIS_HOST=redis # Use your existing Redis
  #     - REDIS_PORT=6379

  # redis:
  #   container_name: redis
  #   image: docker.io/valkey/valkey:8-alpine
  #   command: valkey-server --save 30 1 --loglevel warning
  #   restart: unless-stopped
  #   volumes:
  #     - valkey-data:/data
  #   cap_drop:
  #     - ALL
  #   cap_add:
  #     - SETGID
  #     - SETUID
  #     - DAC_OVERRIDE
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "1m"
  #       max-file: "1"
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 3s
  #     timeout: 10s
  #     retries: 10
#   docker compose --profile gpu-nvidia up -d --build
#   docker compose --profile gpu-nvidia up -d
